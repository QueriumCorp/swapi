#------------------------------------------------------------------------------
# written by: Lawrence McDaniel
#             https://lawrencemcdaniel.com
#
# date:       Sep-2022
#
# usage:      setup nginx for EKS load balancer for this deployment
#             see https://cert-manager.io/docs/
#------------------------------------------------------------------------------
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: swapi-aktiv
  namespace: querium-swapi
  annotations:
    # base annotations: pretty much all ingresses need these.
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt"

    # mcdaniel sep-2022: CORS config ported from legacy prod EC2 nginx.conf
    # see: https://github.com/kubernetes/ingress-nginx/issues/5496
    nginx.ingress.kubernetes.io/configuration-snippet: |
      # 2/10/2022 - EB had so much trouble validating http_origin against the url. 
      # 	At the end, EB desides that it isn't necessary because server_name
      #	defines the url in the server block.  
      set $cors "";
      #if ($http_origin ~* (https?://qq-stepwise-api\.querium\.com)) {
      #if ($http_origin ~ '^https?://qq-stepwise-api\.querium\.com'){
      #if ($http_origin ~* (https?://.*\.querium\.com)){
      if ($http_origin) {
        set $cors "true";
      }

      # Nginx doesn't support nested If statements, so we use string
      # concatenation to create a flag for compound conditions

      # OPTIONS indicates a CORS pre-flight request
      if ($request_method = 'OPTIONS') {
        set $cors "${cors}options";  
      }

      # non-OPTIONS indicates a normal CORS request
      if ($request_method = 'GET') {
        set $cors "${cors}get";  
      }
      if ($request_method = 'POST') {
        set $cors "${cors}post";
      }

      # if it's a GET or POST, set the standard CORS responses header
      if ($cors = "trueget") {
        # Tells the browser this origin may make cross-origin requests
        # (Here, we echo the requesting origin, which matched the whitelist.)
        add_header 'Access-Control-Allow-Origin' "$http_origin";
        # Tells the browser it may show the response, when XmlHttpRequest.withCredentials=true.
        add_header 'Access-Control-Allow-Credentials' 'true';
      }

      if ($cors = "truepost") {
        # Tells the browser this origin may make cross-origin requests
        # (Here, we echo the requesting origin, which matched the whitelist.)
        add_header 'Access-Control-Allow-Origin' "$http_origin";
        # Tells the browser it may show the response, when XmlHttpRequest.withCredentials=true.
        add_header 'Access-Control-Allow-Credentials' 'true';
      }

      # if it's OPTIONS, for a CORS preflight request, then respond immediately with no response body
      if ($cors = "trueoptions") {
        # Tells the browser this origin may make cross-origin requests
        # (Here, we echo the requesting origin, which matched the whitelist.)
        add_header 'Access-Control-Allow-Origin' "$http_origin";
      
        # in a preflight response, tells browser the subsequent actual request can include user credentials (e.g., cookies)
        add_header 'Access-Control-Allow-Credentials' 'true';

        # Tell browser to cache this pre-flight info for 20 days
        add_header 'Access-Control-Max-Age' 1728000;

        # We should only need this header for non-simple requests
        # methods (e.g., DELETE), or custom request methods (e.g., XMODIFY)
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';

        add_header 'Access-Control-Allow-Headers' 'Accept,Authorization, Cache-Control, Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent, X-Requested-With';

        # build entire response to the preflight request
        # no body in this response
        add_header 'Content-Length' 0;

        # (should not be necessary, but included for non-conforming browsers)
        add_header 'Content-Type' 'text/plain charset=UTF-8';

        # indicate successful return with no content
        return 204;
      }

spec:
  tls:
  - hosts:
    - "aktiv.qq-stepwise-api.querium.com"
    - "*.aktiv.qq-stepwise-api.querium.com"
    secretName: aktiv.qq-stepwise-api-tls
  rules:
  - host: aktiv.qq-stepwise-api.querium.com
    http:
      paths:
      - backend:
          service:
            name: swapi-aktiv
            port:
              number: 8000
        path: /
        pathType: Prefix
